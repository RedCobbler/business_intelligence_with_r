# Chapter 9: Reporting and Dashboarding

- Reports and technical memos
- Dashboards
- Slide decks 
- `purl`-ing: scraping the raw code from your `.Rmd` files
- Shiny apps
- Tweaking the YAML headers

It's fine to create reports in word processing or slide show software, but it can be smarter to create data products entirely inside R. There are a number of benefits to doing this: you have the code embedded in your data product, so that final product automatically updates when you change the data or code the next time you 'knit' it; you can share documents that others can use for both the product and the code, which is great for reproducibility as well as documentation; and you can include interactive content, something impossible to do in static documents. 

If you haven't created data products using R Markdown yet, you're in for a treat. To get started, just open a new R Markdown document, choose Document (keeping the html output default), and hit OK. A default template will open in the Source window, from which you can modify it as needed. Just click **Knit HTML** and provide a file name and your product is saved to your working directory as a stand-alone `.html` file. It also opens in a pop-up for immediate viewing. It is that simple to create data products that really impress decision makers used to PDFs and static slide decks. 

Code occurs in "chunks", sections in which you place the code you want R to execute. Free text outside those chunks is converted into html or other output types via R Markdown, a flavor of the Markdown language that provides simple shortcuts to convert the raw text into formatted html. You can also use regular html as well, such as `<br>` for line breaks, and so on. See Appendix 3 for a cheatsheet of R Markdown symbols and usage, and RStudio's [R Markdown page](http://rmarkdown.rstudio.com/) for detailed information and appropaches. 

The single biggest "oops" in using R Markdown---that you will immediately easily fix the first time it happens, but you will *also* inevitably forget to do this later---is ensuring you have put *two spaces* at the end of each line where you want a line break after text. I've used R Markdown for years, but even creating one of the examples below, I forgot to do this on a few lines and got a jumbled mess as a result. So, yeah, it's gonna happen. 

Ultimately, there is rapidly increasing emphasis on reproducible research in research and academia, the idea that *any* analytic product can be reproduced by an independent analyst. Industry is adopting the same philosophy, where ideally any analytic product created in one division of a company can be completely reproduced (and often subsequently modified) by another division, without having to spend time and resources reverse-engineering it. "The code *is* the documentation" is longer a viable excuse (or career choice!), so using R Markdown to create your data products from the start can save a **lot** of time later. Having it become an enterprise best practice/standard process is even better. 

The examples in this chapter are just simple examples; there are many, many possibilities with all of these output options, and exploring the tutorials, galleries, and example pages are well worth the effort to find ready-to-go and ready-to-customize templates and apps you can use and modify for your own ends. 


## Reports and technical memos

Reports are typically look-back affairs, and can range from a simple dataset or table, to a set of KPI graphs on a single webpage, to a full-blown, multi-tab overview of a group of activities. The vast majority of analytics in modern BI tend to be report-oriented. Technical memos are usually one-off analytic products that answer a specific question, but can also provide guidance on next steps. 

We saw an example of a data product that could be considered either a report or a memo in Chapter 1, in the exploration and forecasting of the Hauteville House's power consumption (full code in Appendix 2): 

![](images/biwr_ch1_knitr_ex.png)

### Output formats for `.Rmd` documents

Web (html) reports are ready to create out-of-the-box. To create PDF or Word documents, you need to install programs on your machine that do not come with R. For PDF, you need a TeX program, and for Word docs you need either Word or Libre/Open Office:

{width="narrow"}
| OS | PDF | Word |
| -- | --- | ---- |
| Windows | [MiKTex](http://miktex.org/) | MS Word |
| Mac OS X | [MacTeX](https://tug.org/mactex/) | MS Word for Mac |
| Linux | [Tex Live](https://www.tug.org/texlive/) | [Libre Office](https://www.libreoffice.org/download/libreoffice-fresh/) or [Open Office](https://www.openoffice.org/) | 


## Dashboards

There are a lot of dashboards in business intelligence that don't really deserve the name. Just because you have graphs and interactivity doesn't mean you have a real dashboard; much like driving a car, if you're getting information about how fast you were going 10 minutes ago, it's not of much use. Dashboards are usually about real-time analytics or for analytics that help decision makers plan their day's activities after a no more than a quick viewing. Forecasting fits into this group as well, much as a GPS or driving app provides you information about where you're going. "Dashboards" meant for "what has happened"-type needs or for more methodical exploration and drill-downs are more accurately termed "reports."   

Still, several commercial products have allowed BI analysts to create interactive, dataviz-based reports. By habit, if nothing else, these have come to be known generally as dashboards anyway. So call them what you want, just make sure you're clear on what type of tool you really need when you're asked to create a "dashboard."  

### Simple dashboarding with R Markdown

Since `.Rmd` files can be exported as html, you can create simple dashboards easily in an R Markdown script. The resulting stand-alone file can be placed into a website directly or via an `<iframe>`; at my company, we can't upload javascript-based files into our Intranet, but we can upload them to Sharepoint and then call that file from its Sharepoint URL into an `<iframe>` on our Intranet. 

Using data from the [University of Queensland Vital Signs Dataset](http://dx.doi.org/102.100.100/6914), and the `htmlwidgets`-based package `sparkline`, we can create a simple example dashboard in an `.Rmd` file that shows vital signs for a surgery case (imagine it streaming, rather than static data!). 

Because the `sparkline` package was never fully completed, you need to add a small `<style>` hack to the css to get the tooltips to work properly. That hack is included at the top of the R Markdown file, just after the YAML header. 

To explore this dashboard, open a new R Markdown file and replace the template text with the text below, then press the **Knit HTML** button. 

~~~~~~~~
---
output: html_document
---

<style>
.jqstooltip {
  -webkit-box-sizing: content-box;
  -moz-box-sizing: content-box;
  box-sizing: content-box;
}
</style>

### Vital Signs Dashboard

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)

# devtools::install_github('htmlwidgets/sparkline')
# see documentation at https://github.com/htmlwidgets/sparkline
require(sparkline)
require(lubridate)

# 10 minute section of vital signs data from University of Queensland
vs = read.csv("https://outbox.eait.uq.edu.au/uqdliu3/uqvitalsignsdataset/_uqvitalsignsdata/case20/fulldata/uq_vsd_case20_fulldata_10.csv", header=T)

# convert _ to . in case time and make into date time class 
# Date just defaults to current day since there's no date field in data
vs$Case_Time = gsub("_", ".", as.character(vs$Time), fixed = TRUE)
vs$Case_Time_ct = as.POSIXct(vs$Case_Time, format = "%H:%M:%OS")

# Use start time from data set, create object for latest time
vs$Date_Time_ct = vs$Case_Time_ct + hours(11) + minutes (28)
curr_time = substr(as.character(vs$Date_Time_ct[length(vs$Date_Time_ct)]), 12, 21)
```

#### Patient MRN: **123456789**   
<br>  
Case Start Time: `r vs$Date_Time_ct[1]`  
<br>  
   
| *Vital* | *Trend up to current time:* `r curr_time`  | *Distribution* | 
| ------- | ------- | ------- |
| Heart Rate | `r sparkline(vs$HR, width=250, height=60)` | `r sparkline(vs$HR, width=100, height=60, type="box")` | 
| Pulse | `r sparkline(vs$Pulse, width=250, height=60)` | `r sparkline(vs$Pulse, width=100, height=40, type="box")` | 
| Minute Volume | `r sparkline(vs$Minute.Volume, width=250, height=60, normalRangeMin=5, normalRangeMax=8, drawNormalOnTop=T, normalRangeColor="lightgreen")` | `r sparkline(vs$Minute.Volume, width=100, height=40, type="box")` | 
| Tidal Volume | `r sparkline(vs$Tidal.Volume, width=250, height=60, normalRangeMin=280, normalRangeMax=400, drawNormalOnTop=T, normalRangeColor="lightgreen", fillColor="transparent")` | `r sparkline(vs$Tidal.Volume, width=100, height=60, type="box")` | 

<small>*Green bands show normal ranges.*</small>  
~~~~~~~~

![](images/vitals.png)

Note that the green bands are *not* the proper normal ranges for those vital signs, they're just there as an example. (Anyway, why would you take medical advice from a coding book?) 


### Dashboarding and reporting with `flexdashboard`

Yet another brilliant product from the RStudio folks is an easy-to-use dashboard template package called [`flexdashboard`](http://rmarkdown.rstudio.com/flexdashboard/). It's built on top of the not-nearly-as-easy-to-use [Shiny dashboard](https://rstudio.github.io/shinydashboard/) approach, which hides the complexity of the Shiny system for users who just want to make highly customizable dashboards using (mostly) R Markdown instead. That said, you can still use Shiny inside a flexdashboard, making it the best of both worlds. 

View the [layouts](http://rmarkdown.rstudio.com/flexdashboard/layouts.html) and [examples](http://rmarkdown.rstudio.com/flexdashboard/examples.html) before diving in; there's probably a combination of those already out there that will meet a good proportion of your initial design needs.  

To show a simple example, we'll use the same data and approach we used in Chapter 1, exploring and forecasting the power usage at the Hauteville House. 

~~~~~~~~
---
title: "Hauteville House Power Use"
output: 
  flexdashboard::flex_dashboard:
    orientation: rows
    vertical_layout: fill
    source_code: embed
---

```{r setup, include=FALSE, cache=TRUE}
require(flexdashboard)
require(plotly)
require(zoo)
require(dplyr)
require(reshape2)
require(forecast)
require(ggplot2)
require(leaflet)
require(dygraphs)
require(taucharts)
require(DT)

# Read the data into R 
#download.file("https://archive.ics.uci.edu/ml/machine-learning-databases/00235/household_power_consumption.zip", "household_power_consumption.zip")
# NAs are represented by blanks and ? in this data, so need to change to NA
power = read.table(unz("household_power_consumption.zip", "household_power_consumption.txt"), sep=";", header=T, na.strings=c("?",""), stringsAsFactors=FALSE)

# Convert data to Date object
power$Date = as.Date(power$Date, format="%d/%m/%Y")

# Obtain the Month and Year for each data point
power$Month = format(power$Date,"%Y-%m")

# Add the first to each Y-m combo and convert back to Date
power$Month = as.Date(paste0(power$Month, "-01"))

# Use 'zoo' to perform interpolation for missing time series values
power$Global_active_power_locf = na.locf(power$Global_active_power)

# Use 'dplyr' to group by month
power_monthly = power %>% 
  group_by(Month) %>%
  summarise(Max_Demand_kW = max(Global_active_power_locf), 
    Total_Use_kWh = sum(Global_active_power_locf)/60)

# Remove partial months from data frame
power_monthly = power_monthly[2:47,]
```

Overview
=======================================================================

Results {.sidebar}
-----------------------------------------------------------------------

### Summary

Total monthly power use follows a predictable annual cycle, with winter peaks and summer troughs.   

In coming months, usage will peak between ~950-1150 kWh (80% prediction range) in December and January, then steadily fall over the remainder of the winter and early spring.   

<br>  
<hr>

#### Methods and Analytics Details
  
- Data: 1-minute time step, 16 December 2006 through 26 November 2010  
- Analysis: 1-month time step, January 2007 through October 2010   
- Forecast: 1-month time step, November 2010 - April 2011   

<br><br><br>    

<a href="https://archive.ics.uci.edu/ml/datasets/Individual+household+electric+power+consumption" target="_blank">Data Source and Metadata</a> 



Row {data-height=550}
-----------------------------------------------------------------------

### Time Series and Forecast of Power Use (kWh)

```{r forecastplot}
# Create a time series object of Total (Monthly) Usage
total_use_ts = ts(power_monthly$Total_Use_kWh, start=c(2007,1), frequency=12)

# Automatically obtain the forecast for the next 6 months
total_use_fc = forecast(total_use_ts, h=6)

# Create a data frame with the original data
# and space for the forecast details
use_df = data.frame(Total_Use = power_monthly$Total_Use_kWh, 
  Forecast = NA, Upper_80 = NA, Lower_80 = NA)

# Create a data frame for the forecast details
# with a column for the original data
use_fc = data.frame(Total_Use = NA, Forecast = total_use_fc$mean, Upper_80 = 
  total_use_fc$upper[,1], Lower_80 = total_use_fc$lower[,1])

# "Union" the two data frames into one
use_ts_fc = rbind(use_df, use_fc)

# Create a time series of the data and forecast results
total_use_forecast = ts(use_ts_fc, start=c(2007, 1), freq=12)

# Create the forecasting widget
dygraph(total_use_forecast) %>% 
  dyAxis("y", valueRange = c(100, 1400)) %>%
  dySeries(c("Total_Use"), label="Actual kWh Use") %>%
  dyEvent(x = "2008-08-01", "Closed for vacation", labelLoc = "top") %>%
  dyShading(from = "2008-07-15", to = "2008-08-15") %>%
  dyRangeSelector(dateWindow = c("2008-06-15", "2011-06-01")) %>%
  dyLegend(width = 800)
```

Row {data-height=450}
-----------------------------------------------------------------------

### Distribution of Monthly Total Use

```{r useplot}
use_histo = ggplot(power_monthly, aes(Total_Use_kWh, text=paste("Month: ", 
            format(Month, "%B %Y"), "<br>Total kWh Use: ", Total_Use_kWh))) +
  geom_histogram(color="gray80", fill="steelblue", binwidth=50) +
  ylab("Number of months") + 
  xlab("Total Use (kWh)") +
  theme_bw() 
  
ggplotly(use_histo)
```


### You Are Here

```{r map}
popup_content = paste(sep = '<br>',
  '<b><a href="http://www.visitguernsey.com/victor-hugo-house">
  Hauteville House</a></b>',
  '<img src="http://i.telegraph.co.uk/multimedia/archive/01009/guernsey-victor_1009367c.jpg" width="100", height="46">'
)

leaflet() %>%
  addTiles() %>%
  setView(-2.5376379, 49.4513514, zoom=13) %>%
  addMarkers(-2.5376379, 49.4513514, popup = popup_content)
```

Daily Summary
=======================================================================

```{r calendarplot}
source("http://blog.revolutionanalytics.com/downloads/calendarHeat.R")

# Use 'dplyr' to group by day, excluding 2006
power_daily = power %>% 
  group_by(Date) %>%
  summarise(Max_Demand_kW = max(Global_active_power_locf), 
            Total_Use_kWh = sum(Global_active_power_locf)/60) %>%
  filter(Date >= "2007-01-01")

# Plot the calendar graph to view the kWh use pattern
calendarHeat(power_daily$Date, power_daily$Total_Use_kWh, color="r2b", 
             varname="Total Daily Power Use (kWh)")
```

Data
=======================================================================

Results {.sidebar data-width=450}
-----------------------------------------------------------------------

### Forecast Details

*Forecasting Model*    
`r total_use_fc$method`  

*Forecast Results*    

```{r forecasting}
round(data.frame(total_use_fc), 0)
```

Row
-----------------------------------------------------------------------

```{r datatable}
power_monthly[,2:3] = round(power_monthly[,2:3], 0)
datatable(power_monthly, filter = "top")
```
~~~~~~~~

![](images/flexdashboard.png)


## Slide decks

At some point, every analyst needs to report their results in a meeting or briefing. Traditional static slide decks are fine, but one of the powerful features of R Markdown is the ability to create slide decks or apps with interactive features, allowing the analyst to help decision makers explore the results and their implications interactively, in real time. Even if you don't create interactive content, having a slide deck that includes the code that generated the results is really useful for documentation, code review, or---most often---the inevitable revision when a decision maker asks another "what if you tried...?" question. 

RStudio has two slide deck styles built in, `ioslides` and `Slidy`. Which is better is probably a matter of taste, though I tend to like the aesthetics of `ioslides.`

~~~~~~~~
---
title: Faster Than Thought 
subtitle: A Symposium on Digital Computing Machines
author: A.A.L
date: December 10, 1815
output: ioslides_presentation
---
~~~~~~~~

![](images/default_css_slide.png)

`ioslides` has a great default style, but I've found that some rooms (especially those with a lot of natural light) aren't amenable to the grey text. As an example of how to change this, get the latest ioslides style sheet (as of this writing it is [here](rmarkdown/inst/rmd/ioslides/ioslides-13.5.1/theme/css/default.css)), and save it as a `.css` file into the same directory where you are saving your `.Rmd` file. I change the grey to black for these types of rooms by making these changes in the stylesheet:

| Line | Style block | Original setting | Change to: |
| ---- | ----------- | ---------------- | ---------- |
| 245 | `slides > slide` | `color: #797979;` | `color: black;` |
| 454 | `h2` | `color: #515151;` | `color: black;` |
| 463 | `h3` | `color: #797979;` | `color: black;` |
| 1339 | `.title-slide hgroup h1` | `color: #515151;` | `color: black;` |
| 1344 | `.title-slide hgroup h2` | `color: darkgrey;` | `color: black;` |
| 1339 | `.title-slide hgroup p` | `color: #797979;` | `color: black;` |

I save this new stylesheet as `default_black.css`. Then, in the YAML header of your `.Rmd` file, change `output: ioslides_presentation` to (line breaks and spacing matters!):

~~~~~~~~
---
title: Faster Than Thought 
subtitle: A Symposium on Digital Computing Machines
author: A.A.L
date: December 10, 1815
output:
  ioslides_presentation:
    css: default_black.css
---
~~~~~~~~

![](images/black_css_slide.png)

As long as you have both the `.css` and `.Rmd` files in the same folder, it will make the conversion for you. Obviously, any style element can be changed in the same way, so even if you don't know css, you can probably web search what you want to change to find out what that particular element is named in html, and go from there.  


## `purl`-ing: scraping the raw code from your `.Rmd` files

The `purl` function in `knitr` allows you to "scrape" your R Markdown files for the R code. So if you've created a data product in R Markdown and you want just the code from it copied into a separate file, you can use `purl`. Using the Chapter 1 final data product as an example:

```
purl("Hauteville_House_Power_Forecast_20101127.Rmd", documentation = 0)
```

The `documentation = 0` option removes the `knitr` code chunk options from your output, so you just get the raw R code. Use `documentation = 2` to keep those options in the resulting file, which will appear as commented lines (`#`).

A new `.R` file will appear in your working directory with the raw R code. 

![](images/Hauteville_purl.png)


## Shiny apps

Shiny is an incredible tool---being able to update parameters and inputs on the fly is a tremendous improvement for decision makers in exploring "what if?" scenarios alongside the analyst or even flying solo. Basically, if you can do it in R, you can do it in Shiny. RStudio's [Shiny page](http://shiny.rstudio.com/) is a wealth of [knowledge](http://shiny.rstudio.com/tutorial/), [demos](https://www.rstudio.com/products/shiny/shiny-user-showcase/), and [examples](http://shiny.rstudio.com/gallery/) you can pull from to create your own app. 

A great use-case for Shiny is in risk assessment, where the decision maker can see the effects of assumptions on the probability of a value or range of values, exploring them in real time. (This can be dangerous as well, if they change their assumptions to obtain the outcome they want to see!) 

Below is a screenshot of an app that uses the basic risk assessment tool of the [betaPERT distribution](https://www.riskamp.com/beta-pert) to create a probability model of expert opinion, where the subject matter expert provides the value of minimum and maximum possible values as well as the most likely value. An uncertainty parameter *gamma* provides the user with the ability to modify the kurtosis of the distribution; a value of 4 is the [standard betaPERT](http://vosesoftware.com/ModelRiskHelp/index.htm#Distributions/Continuous_distributions/PERT_distribution.htm), while lower values show increased uncertainty and larger values show increased certainty in the estimate of the most likely value (termed the [modified betaPERT](http://vosesoftware.com/ModelRiskHelp/index.htm#Distributions/Continuous_distributions/PERT_distribution.htm). 

The code that created this app is contained in Appendix 3.

![](images/risk_app.png)


## Tweaking the YAML headers

The YAML header provides you with a way to customize the output of R Markdown files. The defaults are generally great for most needs, but occasionally you want to make some modifications, and I've found that the web doesn't have a lot of information readily available on this specific to R Markdown. There is some information [here](http://rmarkdown.rstudio.com/authoring_pandoc_markdown.html#extension-yaml_metadata_block), and a few tips and tricks I use often are below. 

The header can include R code and html. For example, if you have an ioslides file and want to have the date automatically show up when run, use single quotes with back ticks to contain the R Markdown text:

~~~~~~~~
---
title: This title doesn't have a short title 
subtitle: Dude, where's my banana?
author: Dr. Nefario, Gru, and Kevin
date: '`r format(Sys.Date(), "%B %d, %Y")`'
output: ioslides_presentation
---
~~~~~~~~

![](images/ioslide_r.png)

You can use html to customize the text. For example:

~~~~~~~~
---
title: This title <br>doesn't have<br> a short title 
subtitle: Dude, <em>where's</em> <del>my</del> <b>&beta;anana</b>?
author: Dr. Nefario, Gru, and Kevin
date: '`r format(Sys.Date(), "%B %d, %Y")`'
output: ioslides_presentation
---
~~~~~~~~

![](images/ioslide_html.png)

Some characters need to be escaped in YAML for it to work with text you wish to display---for example, to use a colon (`:`) you need to escape the whole string with double quotes (or use single quotes and double them up for apostrophes):

~~~~~~~~
---
title: "This title <br>doesn't have<br> a short title: <br>Dude, <em>where's</em> <del>my</del> <b>&beta;anana</b>?"
author: Dr. Nefario, Gru, and Kevin
date: '`r format(Sys.Date(), "%B %d, %Y")`'
output: ioslides_presentation
---
~~~~~~~~

![](images/ioslide_colon.png)

The gear button at the top of the Source window can be used to modify the YAML via a GUI for many of the major options for each type of R Markdown document. For example, if you wanted a PDF output of your slide deck, the gear dialog would show this:

![](images/rmarkdown_gear.png)

If you poke around the [R Markdown site](http://rmarkdown.rstudio.com/) and/or [Stack Overflow](http://stackoverflow.com/search?q=R+YAML+header), you can probably find answers to most R/YAML-associated questions you may have.  
