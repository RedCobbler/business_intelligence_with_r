# Appendix 1: Setting up projects and using "Make" files

## Setting up a project with RStudio and Git

Setting up a project before you begin any analysis takes a little time, but is an essential task for professional data science. Having a standard set of processes makes redoing, recreating, or reproducing any analysis a breeze.

First, if you don't already have Git or Subversion installed, you'll need to install at least one of them, depending on your preference. If you're new to version control, you should go with Git. While it can provide all a solitary coder needs locally, Git is especially useful as it allows for concurrent and asynchronous collaboration and development via Github, which also serves as an online version control/backup.

Outside of R, create a separate directory for every project, and within that directory, set up folders that allow you to contain code, data, and output in logical groupings. At a minimum, it's best to have separate folders for data, analysis, and products. For example, a project for which you expect to produce a static report, a presentation, and an interactive app might be set up as follows:

![](images/Apx1_01.png)

The particular folder names and organization are not important. What's important is having a system that is general enough to use for any project and straightforward enough to share with others with minimal explanation.

After completing the directory setup, open RStudio.

The best way to organize a project within R and put it under version control is through RStudio. Under the **File** menu, click *New Project*. Then click *Create project from: Existing directory*. A blank RStudio environment will open. Then select the **Tools** menu, click *Version Control*, and then *Project Setup*. A window will open:

![](images/Apx1_02.png)

Select Git from the Version control system: button, then click yes, and yes again. RStudio will reboot, and your project is now under local version control. The directory will now look like this (including hidden files):

![](images/Apx1_02.png)

Making a habit of setting up folders like this in a systematic way makes it easy for others to understand and replicate your work. Adding version control gives you the ability review every change you made since the start of the project, to roll back to a previous state if a path of coding turns out to be a dead end or if something is accidentally deleted, and also allows for more efficient and safe collaboration with others.

Git works by storing the project as a set of "snapshots" that keep unmodified files alongside links to changes in modified files that will allow a rollback to a previous changepoint.

It's important to remember to not use spaces in any of your folder or file names, as Git (as well as other data science tools) often may not deal with them appropriately.

### Committing your changes

Once your project is under version control with Git, a new tab will be available in your RStudio session titled "Git." Each file appears in the list, and whenever changes are made and saved in your project files, the modified files in this list will have a set of question marks appear in the Status field. Clicking the checkbox alongside those files and then clicking the Commit button saves the project state at that point.

A dialogue box will then pop up that will allow you to provide notes on what changes were made. The level of detail to include is up to you, but it's good practice to use enough detail that someone unfamiliar with your project could understand it enough to recreate or roll it back safely. 

### Rolling back to a previous state

Rolling back to a previous state is as simple as clicking the Revert button in the Git tab.

### Packaging a project

By setting up a project this way, the only additional thing you need to do is use relative paths in all scripts and R markdown files---you'll be able to tar/zip up the entire project and ship it to others, knowing it is already set up to run as-is.

RStudio has a good overview of its integration with version control for both [Git and Subversion](https://support.rstudio.com/hc/en-us/articles/200532077-Version-Control-with-Git-and-SVN).


## "Make" files in R

The "makefile" is so named with a hat-tip to Make, a program that builds programs from source code. An R "makefile" runs a set of independent R scripts, which allows you to create modular code (which is far easier to debug than one long script), as well as mix and match scripts as needed across a variety of projects. For any given project, this R script could be run once and it would (re)create the entire analysis and output. An example of an R "makefile" is below, which also highlights the "clear text commenting" approach:

<<(code/Makefile_example.R)

Alongside the "makefile," it's useful to have an R Markdown file open in which you can document methods and results as you develop the project. This makes final product development considerably easier, but it also serves as a reminder to code with the audience in mind. If you habitually write out what you did and what it means alongside the code that generates the results, you'll save time laterâ€”for you, as well as for for any downstream or future users.

Because of system and platform nuances with pdf or Word export and slide creation styles, it's usually best to use the html document option for the main markdown file's format. It's slightly easier to modify and convert that to LaTeX/pdf or Word, for example, than the other way around, especially if you haven't yet set up RStudio to create pdfs. Once you've selected R Markdown in the New File menu, you'll get a dialogue box that provides you an opportunity to add a title and your name. The choice defaults to HTML, so simply clicking on OK opens a default example.

The `knitr` package allows you to include R code within chunks, marked by three backticks at the start and end of each chunk, as well inline with text, as marked with a single backtick at the start and end of the portion of the R code to be analyzed. The code so designated is run each time you "knit" the file, so if the data changes, the analysis will repeat as before on the new data. The benefit of this for writing reports or presentations where revisions of the data are inevitable is clear.

Click the **?** or **MD** button in the `.Rmd` script window of RStudio for a quick overview of Rmarkdown syntax, and see Appendix 2 for an example based on the Chapter 1 analysis. 
